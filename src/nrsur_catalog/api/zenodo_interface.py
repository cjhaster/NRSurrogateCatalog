"""Module to upload NRSur Catlog events to Zenodo
Used just by NRSur Catalog developers/maintainers
"""

import os
import argparse
from ..logger import logger
from ..utils import get_event_name
from glob import glob
from tqdm.auto import tqdm
import git

HERE = os.path.dirname(os.path.abspath(__file__))
URL_FILE = os.path.join(
    HERE, "zenodo_urls.txt"
)  # This file's contents are autogenerated

ZENODO_KEYS = dict(
    MAIN=000,
    TEST=1166487
)


class ZenodoInterface:
    def __init__(self, test=True):
        from zenodo_python import ZenodoHandler
        self.test = test
        self._z = ZenodoHandler(test=test)

        self.project_key = ZENODO_KEYS['MAIN']
        if self.test:
            self.project_key = ZENODO_KEYS['TEST']

        self._files_json = self._z.deposition_files_list(self.project_key).json()
        logger.debug(f"Zenodo project key: {self.project_key}, filedata: {self._files_json}")

    def cache_download_urls(self):
        """
        Return list of file download urls for a deposition.
        """
        urls = [f['links']['download'] for f in self._files_json]
        # write to file
        with open(URL_FILE, 'w') as f:
            f.write('\n'.join(urls))

    @property
    def database_filenames(self):
        """
        Return list of file names in the database
        """
        return [f['filename'] for f in self._files_json]

    def delete_file(self, fname):
        file_id = [f['id'] for f in self._files_json if f['filename'] == fname][0]
        self._z.deposition_files_delete(self.project_key, file_id)

    @property
    def url(self):
        return self._z.base_url.replace('api/', f'deposit/{self.project_key}')

    def upload_files(self, file_regex: str) -> None:
        logger.info(f"Uploading files to Zenodo: {self.url}")
        files = glob(file_regex)
        for filepath in tqdm(files, desc="Uploading"):
            fname = os.path.basename(filepath)
            if fname in self.database_filenames:  # need to delete first
                self.delete_file(fname)
            r = self._z.deposition_files_create(self.project_key, fname, filepath)
            if r.status_code != 200:
                raise RuntimeError(f"Failed to upload {fname} to Zenodo: {r.json()}")
        logger.info(f"Finished uploading {len(files)} files to Zenodo")
        self._z.session.close()
        self.cache_download_urls()
        self._commit_url_file()

    def _commit_url_file(self):
        try:
            repo_root = os.path.join(HERE, "../../..")
            repo = git.Repo(repo_root)
            repo.git.add(URL_FILE)
            repo.git.commit(m=f"update urls [automated]")
            repo.git.push()
        except Exception as e:
            logger.warning(
                f"Failed to commit {URL_FILE}."
                f"\n{e}\n"
                f"Commit and push manually."
            )

    def __exit__(self, exc_type, exc_val, exc_tb):
        self._z.session.close()

    @staticmethod
    def get_event_urls() -> dict:
        """Returns a dictionary of the analysed events and their urls"""
        # read in the zenodo_urls.txt file (each line is a url)
        with open(URL_FILE, "r") as f:
            urls = f.readlines()
            urls = [url.strip() for url in urls]

        if len(urls) == 0:
            raise RuntimeError(f"No URLs found in {URL_FILE}")

        # extract the event name from the url
        event_names = [get_event_name(u) for u in urls if u is not None]
        return dict(zip(event_names, urls))


def upload_to_zenodo(path_regex: str, test: bool = True) -> None:
    """Upload the NRSur Catlog events to Zenodo"""
    ZenodoInterface(test=test).upload_files(path_regex)

def main() -> None:
    """Main function to upload the NRSur Catlog events to Zenodo"""
    parser = argparse.ArgumentParser(
        description="Upload the NRSur Catlog events to Zenodo"
    )
    parser.add_argument(
        "path_regex",
        type=str,
        help="Path regex to the events to upload to Zenodo",
    )
    parser.add_argument(
        "--main",
        help="Upload to the main zenodo page (not sandbox).",
        action="store_true",
        default=False,
    )
    args = parser.parse_args()
    test = not args.main
    upload_to_zenodo(args.path_regex, test=test)
